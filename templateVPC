---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create a new VPC with 10.XXX.0.0/16 cidr with one Public and one Private subnet in 2 or 3 availability zones'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: VPC Parameters
        Parameters:
          - ClassB
          - Env
      - Label:
          default: Availabity Parameters
        Parameters:
          - AvailabilityZones
          - NumberOfAZ

###############################################################################
### Parameters
###############################################################################
Parameters:
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-128]'
    MinValue: 0
    MaxValue: 128
  NumberOfAZ:
    Description: 'Number of AZ to spread VPC'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be 2 or 3'
    MinValue: 2
    MaxValue: 3
  Env:
    Description: 'Environment type'
    Default: dev
    ConstraintDescription: 'Must be dev or prod'
    Type: String
    AllowedValues:
      - dev
      - prod

###############################################################################
### Conditions
###############################################################################
Conditions:
  isProdMode: !Equals [!Ref 'Env', 'prod']
  isThreeAZ: !Equals [!Ref 'NumberOfAZ', 3]
  isProdModeThreeAZ: !And
    - !Condition isProdMode
    - !Condition isThreeAZ

###############################################################################
### Resources
###############################################################################
Resources:
  ##### VPC #####
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast VPC ${Env}'
        - Key: Cidr
          Value: !Sub '10.${ClassB}.0.0/16'
        - Key: Project
          Value: Aviocast

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'VPC Aviocast ${Env}'
        - Key: Project
          Value: Aviocast

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ##### NAT Gateway #####
  EIPNatGatewayA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIPNatGatewayB:
    Type: AWS::EC2::EIP
    Condition: isProdMode
    Properties:
      Domain: vpc

  EIPNatGatewayC:
    Type: AWS::EC2::EIP
    Condition: isProdModeThreeAZ
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !Sub '${EIPNatGatewayA.AllocationId}'
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Public A ${Env}'
        - Key: Project
          Value: Aviocast

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: isProdMode
    Properties:
      AllocationId: !Sub '${EIPNatGatewayB.AllocationId}'
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Public B ${Env}'
        - Key: Project
          Value: Aviocast

  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Condition: isProdModeThreeAZ
    Properties:
      AllocationId: !Sub '${EIPNatGatewayC.AllocationId}'
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Public C ${Env}'
        - Key: Project
          Value: Aviocast

  #######################
  ##### Subnets #########
  #######################

  ##### public subnets #####
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !Ref AvailabilityZones
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.${ClassB}.0.0/21'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Public A ${Env}'
        - Key: Reach
          Value: Public
        - Key: Project
          Value: Aviocast

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !Ref AvailabilityZones
      CidrBlock: !Sub '10.${ClassB}.8.0/21'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Public B ${Env}'
        - Key: Reach
          Value: Public
        - Key: Project
          Value: Aviocast

  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Condition: isThreeAZ
    Properties:
      AvailabilityZone:
        - 2
        - !Ref AvailabilityZones
      CidrBlock: !Sub '10.${ClassB}.16.0/21'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Public B ${Env}'
        - Key: Reach
          Value: Public
        - Key: Project
          Value: Aviocast

  ##### private subnets #####
  ## micro services back offices ##
  PrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !Ref AvailabilityZones
      CidrBlock: !Sub '10.${ClassB}.128.0/20'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Private 1A ${Env}'
        - Key: Reach
          Value: Private
        - Key: Project
          Value: Aviocast

  PrivateSubnet1B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !Ref AvailabilityZones
      CidrBlock: !Sub '10.${ClassB}.144.0/20'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Private 1B ${Env}'
        - Key: Reach
          Value: Private
        - Key: Project
          Value: Aviocast

  PrivateSubnet1C:
    Type: 'AWS::EC2::Subnet'
    Condition: isThreeAZ
    Properties:
      AvailabilityZone: !Select
        - 2
        - !Ref AvailabilityZones
      CidrBlock: !Sub '10.${ClassB}.160.0/20'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Private 1C ${Env}'
        - Key: Reach
          Value: Private
        - Key: Project
          Value: Aviocast

  ##########################################
  ##### Routes tables and associations #####
  ##########################################

  #### Route tables for Public Subnet ####
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Public ${Env}'
        - Key: Reach
          Value: Public
        - Key: Project
          Value: Aviocast

  PublicSubnetInternetGWRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociationPublicSubnetA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociationPublicSubnetB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociationPublicSubnetC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: isThreeAZ
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  #### Private ####
  #Route tables for Private Subnet 1 #
  PrivateSubnet1ARouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Private 1A ${Env}'
        - Key: Reach
          Value: Private
        - Key: Project
          Value: Aviocast

  PrivateSubnet1BRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Private 1B ${Env}'
        - Key: Network
          Value: Private
        - Key: Project
          Value: Aviocast

  PrivateSubnet1CRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: isThreeAZ
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Aviocast Private 1C ${Env}'
        - Key: Network
          Value: Private
        - Key: Project
          Value: Aviocast

  #Route
  PrivateSubnet1ANatGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1ARouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnet1BNatGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1BRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If [isProdMode, !Ref NatGatewayB, !Ref NatGatewayA]

  PrivateSubnet1CNatGWRoute:
    Type: AWS::EC2::Route
    Condition: isThreeAZ
    Properties:
      RouteTableId: !Ref PrivateSubnet1CRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If [isProdMode, !Ref NatGatewayC, !Ref NatGatewayA]

  #Route Associations
  PrivateSubnet1ARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      RouteTableId: !Ref PrivateSubnet1ARouteTable

  PrivateSubnet1BRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1B
      RouteTableId: !Ref PrivateSubnet1BRouteTable

  PrivateSubnet1CRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: isThreeAZ
    Properties:
      SubnetId: !Ref PrivateSubnet1C
      RouteTableId: !Ref PrivateSubnet1CRouteTable

  ## NACL
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Public ${Env}'
        - Key: Network
          Value: Public
        - Key: Project
          Value: Aviocast

  PublicSubnetANetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'Private ${Env}'
        - Key: Network
          Value: Private
        - Key: Project
          Value: Aviocast

  PrivateSubnet1ANetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet1BNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1B
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet1CNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: isThreeAZ
    Properties:
      SubnetId: !Ref PrivateSubnet1B
      NetworkAclId: !Ref PrivateNetworkAcl

  ## TODO YCO : These rules will have to be rewritten once testing done. Block all traffic except that which is explicitly required.
  ## NACL Rules
  PublicSubnetNaclRuleInboundAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  PublicSubnetNaclRuleOutboundAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  PrivateSubnetNaclRuleInboundAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  PrivateSubnetNaclRuleOutboundAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

###############################################################################
### Output
###############################################################################
Outputs:
  AZs:
    Description: 'AZs'
    Value: !Ref NumberOfAZ
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !Ref AvailabilityZones]
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !Ref AvailabilityZones]
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  AZC:
    Condition: isThreeAZ
    Description: 'AZ of C'
    Value: !Select [2, !Ref AvailabilityZones]
    Export:
      Name: !Sub '${AWS::StackName}-AZC'
  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  ClassB:
    Description: 'VPC CIDR'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${AWS::StackName}-10.${ClassB}.0.0/16'
  Env:
    Description: 'Environment'
    Value: !Ref Env
    Export:
      Name: !Sub '${AWS::StackName}-Env'